--------------------------------------------
Learning C++ 
--------------------------------------------

Basic of Object oriented Programming
----------------------------------------------------- 
	Models to represent reality
	Encapsulations:
		Keep data and operations in their model 
		It must include info only about themselves
		Operations must be consice 
		Example: car model shouldn't contain gas price.
	Class:
		c++ construct of model
		Two types - Data, Functions [car.make, car.paint()]
		instance of class also known as object.
	Access specifiers:
		Members may be public, private or protected
		Private member - only with in class
		Protected member - accessible in inherited class
	Inheritance:
		Class may have subclass based on it.
		A subclass may inherit member from super class
		Example: Animal.legs, dog.legs bird.wings
	Polymorphism:
		Sibling classes
		Super class defines some functions but inherit version is implemented differently in subclass making it polymorphic

using namespace std; // --> It eliminates need to specify where variables and functions in the standard library are declared (like cout, cin,
vector. endl etc)resulting in short code. Although the statement saves us from typing std:: whenever we wish to access a class or type defined 
in the std namespace, it imports the entirety of the std namespace into the current namespace of the program. it is considers as bad practice


Data Types:
----------------------------------------------------- 
	Integers:
		Signed or Unsigned
		implementaion dependent - 32 bit or 16 bit
		char (8 bit) can be used to show ASCII
		stdint.h contains portable types like unit32_t, int8_t
	https://en.cppreference.com/w/cpp/language/types

	Floating point numbers:
		Float
		Double 
		Long Double

	Boolean:
		{TRUE, FALSE}
		anything other than 0 is TRUE

	Pointers:
		Special datatype for memory address.
		Pointers may act as reference to existing variable
		same pointer can be used to access many variable sequence wise

Variables:
	Temporary data storage unit 
	Must be declared prior to use
	Must specify type and name
	declaration may contain initialization

	int 123, -5 //decimal   023  //octal, 0x3A //Hexadecimal, 0b1101 //binary, 23U //Unsigned
	float 23.0f, 0.0f
	double 25.4, -22.5
	char 'a' , 'X', '\0', '\n' [fits in 8 bit but ASCII represents in single quotes]
	string "Hello"  [string literals between double quotes]

	GLOBAL  									| Local
	All part of code							| limited to scope of function or loop only 
	Allocated memory by data segment of memory	| Allocated inside stack which is temporary 
	once program ends then mem. is freed 		| execution leaves once scope variable deleted and mem. is freed

Expressions:
	symbolic representation of calculation
	may contain variable, constant and operator
	must produce a value

Assignment:
	line of code that assigns a value to variable
	must contain left hand side and right hand side
	left side must be able to hold value
	data type of both expressions must match (not enforced by compiler - Signed to Unsigned)

Operations:
	Arithmentic :  + - * / %
	Bitwise : & | ~ ^
	Logical : && || !
	Relations : == != > < >= <=
	Pointers : 	* (access to variable it point to)
				& (address of variable)
				-> (access of member of class or structur from pointer)
	https://en.cppreference.com/w/cpp/language/operator_precedence

Auto (type inference)
	TYPEID operator is implementaion dependent so it will show int, float, bool, char or i, f, b, c single letter

Preprocessor directives:
	Your code is preprocessed prior to compiling
	directives tells the preprocessor what to add or remove
	useful for Libraries, Constants, selection code blocks etc 
	using MACROS, IFDEF etc 
	Some of most popular c header files have been made available in cpp as well names like cstdind (preceed with lower case c)
	IFDEF - to include code Conditionally 

Constants:
	useful for parameters in code
	Identifiers with values that will not change during execution
	may be implemented via directives or as variables
	you can define Const qualifier 
		scope encapsulation is enforced
		declaration specific type 

Array:
	collection of data
	homogeneous
	fixed size
	contiguous in memory
	AUTO doesn't work for array

Strings:
	String class:
		not native support 
		Available as standard class <string>, std::string 
		Array of chars terminated with zero
		Operator overloading - redefine operations by existing operator by tapping into semantics of the langauge

Type Casting:
	How to interpret piece of data, useful for converting data types
	Example: int32_t or float 
	Syntax: (unit32_t) (expression)

Q&A:
1.
What does this part of a main.cpp file do?
#include "library.h"
	Causes the replacement of the #include directive by the entire contents of the source file library.h. This is similar to a Copy-Paste operation of library.h into main.cpp.
2.
Why is it important to specify the data type when declaring a variable.
	Because the compiler needs to know how to interpret the data, and its width in bytes.
3.
When is type casting useful?
	when an operation needs to be performed on specific data types like float or int
4.
What is the assumed type of a constant represented in the source code as 0.44?
	double
5.
What is type casting?
	Explicitly specifying the data type of an expression.
6.
What does the auto type specifier do in this line of code? (since C++11)
auto x = 40000.22;
	Specifies that the type of x will be deduced from the initializer. In this case, double.
7.
Which of the following is not a built-in operator of the C++ programming language?
	Logical XOR
8.
What's a disadvantage of defining constants as macros?
	They may lead to syntax errors.
9.
Suppose you want to have several lines of code that print data out for debugging purposes, but you don't want those lines to make it to the final application, for efficiency reasons. Which of the following achieves the desired behavior by using preprocessor directives?
	// comment the following line for the final application
	#define DEBUGGING

	// copy and customize this for every debugging line
	#ifdef DEBUGGING
	cout<<"Var1 = "<<var1<<endl;
	#endif
10.
What is a variable of type double?
	a floating point number
11.
How does the string data type work in C++?
	Strings are implemented as the string class in the string header file.
12.
What's a correct way of accessing the third element in the following array?
int array[10];
	array[2]


Structures, Classes and Pointers
----------------------------------------------------- 
Structures
	containers of heterogeneous data memebers
	Useful for implementing simple Models
	available in C constructs as well but dont follow same syntax in CPP

Enums
	sets of symbols that acts as constant and they are usually assigned consecutive values. 
	prefering enum over constant is that they provide encapsulation

Classes	
	Basic elements of Object oriented programming
	Used for implementing Models
	contain data and function Members
	it means same in java or python classes
	By default class member are private. if you make all data member as public then we forced class to be struct
	We should Encapsulate data member from outside world and use getter/setter function to access it. 
	When we assigns we write to data member and when we print we reads data member
	Constructor of a class is called when object is created - its public member function and it sets memory for all data members
	Implicit constructor is always called when object is called.
	if we write a class which are correlated, we dont want to tweak data freely from outside thats why use function written inside your class only.

Header and implementaion files.
	Header files contain class definintions and function declaration
	implementaion files contains execution code
	implementaion files must include their header file
	your code should only include header files
	All implementaion file must be compiled 

	Compiler 	- 	C++ Source file
						|					 
	Assembler 	-	Assembly file (Human readable native langauge or target CPU)
						|
	Linker 		- 	Object file (Other Object files from distributed Libraries)
						|
					Executable binary 

Pointers
	Special type of variable which holds memory address
	We specify the type of variable we will be pointing to followed by name of pointer precedence via asterisk (*) (int a = 37; int *ptr; ptr = &a )
	For 32 bit CPU pointer will be 32 bit. 
	Pointer are mostly used for dynamic memory management, when you declare variable that memory will be needed and compiler creates that but most real application creates variables and object in memory during run time. this is known dynamic memory allocation. 
	In c it is common to dynamically allocate memory via malloc and as programmer you are responsible to release that
	Pointers dynamically allocate when calling class constructor and free them when you dont need them

References
	Special datatypes
	Aliases to existing variables: int& my_ref = my_int; 
	References are not pointers nor objects and they dont have address
	There are no arrays of references
	There are no pointer to References
	There are no references to references
	application:
		Pass parameters by reference so program will not copy objects as function parameters
		Avoid copying large object in for loops

Pointers 							| References
--------------------------			----------------- 
initialization is optional			| Must be initialized at declaration
can point to different object 		| can't reference a second object
Can be void and NULL 				| have a fixed type and object
Multiple level of indirection		| one level of indirection
Must be dereferenced to access data | No need to dereferencing as its just aliases
Pointer are more powerful 			| references are safer 

Vectors 
	Dynamic-size containers
	The memory is managed for you
	Generic container class
	part for standard template Library
	Two ends - inserting at start requires reallocation so always add at end. 


Q&A:
1.
What would be the correct declaration of a constructor for a class named Sprite?
	public:
	Sprite();

2.
What is one purpose of a structure?
	to contain several data members of different types

3.
Which of the following is an actual difference between a pointer and an iterator?
	Incrementing an iterator always means accessing the next element in the container (if any), no matter the container. Incrementing a pointer means pointing to the next element in memory, not always the next element.

4.
Which of the following is a true statement about the difference between pointers and references?
	A reference cannot be assigned a new value (i.e. refer to a new object other than the original.)

5.
What's the correct way to call the count member function for the object pointer called grades?
class my_array{
 public:
  int count();
};  // ... more members above

int main(){
 my_array *grades = new my_array();
} // ... more code above

	grades->count()

6.
Why is it not possible to declare an array of references, a pointer to a reference, or a reference to a reference?
	Because references are not objects nor variables, so they are not guaranteed to occupy storage and have an address.

7.
The '&' character has many uses in the C++ programming language. Which of the following is not one of these uses?
	to declare a pointer to a function

8.
What is the statement below equivalent to? 
sprite->x
	(*sprite).x

9.
Suppose you want to have several lines of code that print some variables out for debugging purposes, but you don't want those lines to make it to the final application, for efficiency reasons. Which of the following achieves the desired behavior producing the shortest possible code length regardless of the level of optimization used?
	// comment the following line for the final application
	#define DEBUGGING

	// copy and customize this for every debugging line
	#ifdef DEBUGGING
	cout<<"Var1 = "<<var1<<endl;
	#endif

10.
Which of the following is an include guard for the header file my_library.h?
	#ifndef MY_LIBRARY_H
	#define MY_LIBRARY_H

	// my_library.h content 

	#endif /* MY_LIBRARY_H */

11.
What is the purpose of the following line in a header file?
#pragma once
	to make the compiler only parse that header file once even if it is included multiple times in the source

12.
What is an include guard?
	a preprocessor statement that prevents a source file to be included more than once in a project

13.
What is the following expression equivalent to?
A->B->C->D
	*(*((*A).B).C).D

14. 
What's the correct way to call the count member function for the object called grades?
class my_array{
 public:
  my_array();
  int count();
  // ... more members
};
int main(){
 my_array grades;
 // ... more code
 return 0;
}
	grades.count()

15.
Which of the following is a type almost identical to a class?
	Struct

16.
What's the difference between a public and a private class member?
	Public members can be accessed by any function, while private members can only be accessed by the same class' member functions and the friends of the class.


Control Flow 
----------------------------------------------------- 
IF Statements
Switch  
While Loops - first condition is checked
Do While loop - first we do task and check while letter. use if you are sure on getting inside code without checking condition first
For Loop - when we know the range to traverse 

Q&A:
1.
What's the correct syntax of an if statement in C++?
	if(condition)
	// true block
	else
	// false block

2.
What's a difference between a while loop and a do...while loop?
	do...while loops always run the body of the loop in the first iteration regardless of the condition.

3.
When is a switch statement useful?
	When we want to branch to different blocks of code according to some values of a variable.

4.
What's the meaning of the two sections specified between parentheses in a range-based for loop, separated by a colon?
	The first is a variable declaration which will hold an element in a sequence. The second is the sequence to traverse.

5.
What's the meaning of the three sections specified between parentheses in a for loop, separated by semicolons?
	The first is the initialization block, the second is the condition to iterate, and the third is the increment block.


Functions
----------------------------------------------------- 
Procedural blocks that return a value
Functions usually receive fixed number of arguments
Parameters take the values of their arguments
Functions may be global or members of a class 

Function Parameters : 
	pass by value (creates copies)
	pass by pointers (address of variable, it is dangerous but possible)
	pass by references (best options)

1.
Which of the following is NOT a difference between passing arguments by pointer or by reference.
	Pointer arguments use the same syntax as reference arguments.

2.
What's a difference between the implementation of a global function and a member function?
	Member function implementations need to specify the class with the scope resolution operator (double colon).

3.
Why is a function prototype necessary?
	Because it informs the compiler about the return data type, and the parameter types prior to using the functions.

File I/O
----------------------------------------------------- 
fstream header - part if input output lib. 


1.
Which class can be used to read from a text file?
	ifstream
2.
Which of the following is NOT an advantage of using the insertion operator for writing into a file?
	It's safe to use when the file is not open, or it doesn't exist.

----------------------------------------------------- 
Nail Your C++ Interview
----------------------------------------------------- 

Differences between cpp and c 
c 					| cpp
Procedural			| object oriented and also procedural 
Manual if/else		| built in exception handling
static members		| Encapsulation via classes 


----------------------------------------------------- 
Older notes 
----------------------------------------------------- 

https://repl.it/  - online IDE 
https://cpp.sh/   - online C++ program

- Object oriented language
- GUI/HTML take button click where as C or Java have compiler
- Algo needs to be defined in Cpp
	Variable 
		Temp space in memory to hold data
		can be dynamic (changes with user input) or constant 
	Computer assigns data right to left X = 100 [100 will be assigned to X]

CH1
	Hello Word to take cout and cin and print it 

CH2 - Data representation
	Added it in notesChap2.cpp

	Quiz:

		Question 1 of 5
		If we wanted to store whole numbers, which would be the best data type to choose?
		You are correct!
		integer

		Question 2 of 5
		All variables can be overwritten with a new value?
		Correct answer:
		FALSE

		Question 3 of 5
		Integers will truncate the decimal portion instead of rounding it up or down.
		You are correct!
		TRUE

		Question 4 of 5
		How many dimensions can you have in an array?
		You are correct!
		as many as you want

		Question 5 of 5
		How many different data types can you store in the same array?
		You are correct!
		one

CH3 - Flow of Control
	Added it in notesChap3.cpp and solutions

	Quiz:
		Question 1 of 6
		An if within another if is called an embedded if?
		You are correct!
		FALSE

		Question 2 of 6
		The else is required in the if structure?
		You are correct!
		FALSE

		Question 3 of 6
		How many else ifs can you have?
		You are correct!
		as many as you want

		Question 4 of 6
		The other decision structure we use is the switch case?
		You are correct!
		TRUE

		Question 5 of 6
		Loops are used when we want a section of code to repeat for a certain number of times?
		You are correct!
		TRUE

		Question 6 of 6
		The do/while loop is the only post-test loop we commonly use?
		You are correct!

CH4 - Functions 
	Added in Chap4notes.cpp and challange solutions

	Quiz:
		Question 1 of 3
		If functions don't return anything, we say they are type void?
		You are correct!
		TRUE

		Question 2 of 3
		Function parameters must match between calling statement and function header by type, order and number .
		You are correct!

		Question 3 of 3
		Efficient coding practice says to put all of your code into as many functions as possible.
		This answer is incorrect.
		TRUE
		Correct answer:
		FALSE

CH5 -  File I/O

	Quiz:
		Question 1 of 3
		Both inputting and outputting from a file can be done by including the fstream library.
		You are correct!
		TRUE

		Question 2 of 3
		Outputting to a text file will always overwrite the text file if it already exists.
		You are correct!
		FALSE

		Question 3 of 3
		You can only open files that are .txt.
		You are correct!
		FALSE


CH6 - Data Structures
	chap6notes.cpp contains data
	Struct 
	Class 
		ClassExample.cpp contains details 
	pointers
	LinkedList

	Quiz:
		Question 1 of 4
		The keywords public, protected and private are called access specifiers.
		You are correct!
		TRUE

		Question 2 of 4
		You can only use pointers to point to integers.
		You are correct!
		FALSE

		Question 3 of 4
		The * is used to denote a pointer.
		You are correct!

		Question 4 of 4
		A linked list is a list of nodes with a pointer .
		You are correct!


--------------------------------------------
C++ Essential Training : Bill Weinman
--------------------------------------------

CH1: Intro - EssT folder 

1. 
What is a compiled language?
	a language that must be converted from source code into something the OS can run. Source code must be compiled through the preprocessor, compiler, and linker before the OS can read it.

2.
After compiling, running, and deleting a source file with Xcode, what should you do before compiling another source file?
	Run the Clean Build Folder command to remove the compiled data.The Clean Build Folder removes the files and paths that are created when the source file is compiled.

3. 
How are command-line programs run in Microsoft Visual Studio?
	They are compiled through Visual Studio, and then run from the Windows command line.
	Visual Studio will compile source files into a program to run, which can be done through PowerShell.


CH2: Basic Syntax 
	(firstStep.cpp contains details as well)

1. 
A reference can be re-defined to refer to a different variable.
FALSE

2. 
A c-string is an array of _____ type values
char

3.
The switch control uses _____ to exit out of the block.
break

4.
C++ supports both single-line and multiple-line comments.
TRUE

5.
A statement is terminated with _____.
a semicolon

6.
What characters are allowed in a C++ identifier?
any upper- and lower-case letters, numbers, and the underscore character (_)

7.
A pointer is type-aware in C++.
TRUE

8.
Which statement would correctly declare a variable s1 for the structure S declared in the following code?
struct S {
	int i;
	const char * s;
};
S s1 = { 3, "string one" };
The integer `3` and string `string one` would be set to the variable `s1` in this example.

9.
Which C++ element includes a return type, a name, parentheses, and a code block in curly braces?
a function
Functions include all these components, and are essentially standalone code blocks.

10.
What is the purpose of having private data members and public function members in a class in C++?
Private data is encapsulated so objects can manipulate it, without exposing inner workings to the interface.
Encapsulation is a key function of object-oriented programming.

11.
What is one advantage of using cout instead of printf or puts?
The cout class is type aware, and can string together different data types.
You can use strings, integers, and other types seamlessly with `cout`.

12.
The cout class is found in the _____ header.
iostream

13.
Which code block correctly uses a break statement to break out of the while loop?
    int array[] = { 1, 2, 3, 4, 5 };
    int i = 0;

    while(i < 5) {
        if(i == 3) break;
        printf("element %d is %d\n", i, array[i]);
        ++i;
    }
The if statement will evaluate to true in this example, and immediately break out of the while loop execution.


14.
What are the necessary parts of a C for loop?
an expression, a condition, and post-loop control

15.
Which flow control statement that is available in 2011 versions of C++ and newer is most useful for iterating through the elements in a container?
the range-based for loop
This type of flow control will not work in older versions of C++, and requires variable and container controls.

16.
What is a primitive string in C++?
an array of characters terminated with a 0
Primitive strings in C++ are arrays that end in 0, so they can be iterated through like other arrays.

17.
What happens in the following code execution after the conditional check?
    int x = 7;
    int y = 32;

    if(x > y) {
        puts("condition is true"); }
The puts function is skipped.
Because the condition evaluates to false, the `puts` function that follows is skipped.

18.
What is the purpose of a switch statement in C++?
to evaluate multiple conditions
The switch statement uses case clauses to evaluate multiple conditions.

19.
The while loop uses a _____ to control the loop
Conditional Expression

20.
The for loop uses _____ expressions to control flow
3

21.
What is the difference between a statement and an expression?
A statement is a line of code that ends with a semicolon, and an expression is anything that returns a value.
Statements are treated like units of execution, whereas an expression returns a value that may or may not be used.

22.
Which characters are restricted when defining identifiers in C++?
reserved words
C++ reserves 73 keywords and 11 alternative tokens.

23.
What is wrong with the following variable expression?
int main()
{
    int i;
    printf("The value of i is %d\n", i);
    return 0;
}
The variable has no value defined.
The variable `i` has no defined value in this expression.

24.
Which data type uses a value, without the value being stored in the type's assigned memory space?
a pointer
A pointer points to the memory address of an object to get its value.

25.
When using a range-based for loop with a c-string you must test for the null terminator.
TRUE

26.
All the elements in a structure must be the same type.
FALSE

27.
What is the main function in C++?
the entry point of the program, called by the OS when the program launches

28.
A function definition in C++ must always include a return type.
TRUE

29.
Which code contains the correct use of a comment?
int main()
{
    puts("Hello, World!"); // This is a comment
    return 0;
}
Single-line comments are signaled by `//` and multi-line comments are signaled by `/*` followed by `*/` at the end.

30.
While struct members default to public access, class members default to _____.
private

31.
The main function is called by the operating system.
TRUE

32.
Which value will be returned for variable x in the following printf function?
{
    int x = 7;
    int &y = x;
    y = 21;

    printf("The value of x is %d\n", x);
    printf("The value of y is %d\n", y);
}
Because the reference y is set to 21, it will change the value of x to also be 21.

33.
What is the difference between an initialized and an uninitialized primitive array?
Initialized arrays have values defined in the array, and uninitialized arrays do not have values defined.
An initialized array has index values.


CH3: Data Types
	Strongly types langauge
	Data Type defines Size and interpretation of a value.
		Signed Int (32 bits) - Values -2,147,483,648 to 2,147,483,647
		Unsigned Int (32 bits) - Values - 0 to 4,294,967,295
		primitive types - int, floating, boolean
		Compound type 
			- Array - contiguouse sequential set of object of same type. it is flexible, powerful and have low overhead. also basis of C-String and C++ STL container class
			- No primitive string type, null terminated array of charactes is special case, often called C-string 
			- Struct - Sequential set up of various types, it may contains scalars, arrays, even other struct and classes.
			- c++ classes are based on C-structures, basically class is a structur that defaults to private membership. it contains function member as well as data members 
			- union is set overlapping objects (in memory space)
			- pointer is a reference to object an object of a given type.
			- refernce is like pointer but diff semantics, references are immutable - used as aliases 

1.
How are escape characters identified in C++?
by beginning with a "\"
Escape characters begin with "\" like the common "\n" to create a new line, or "\t" to add a tab.

2.
What is the correct syntax to add Joe and his age to the Friend structure below, using an initializer list?
struct Friend {
    int age;
    const char * name;
};
int main() {
    Friend joe = { 42, "Joe" };
    return 0;
}
The initializer list contains the values `42` and `Joe`, which would be added to the structure.

3.
Which data structure allows you to use the same memory space for different types?
Because unions use the same memory space, they can conserve and reuse space for various purposes.

4.
What could you expect to see when attempting to build and compile the following code block?
void func () {
    puts("this is void func ( void )");
    return 3;
}
a build error indicating a problem with the expected return
The void type specifies a null value, so the return cannot have a value.

5.
Any valid type may be a member of a structure.
TRUE

6.Bit fields allow you to pack multiple values into less space.
TRUE

7.
Enumerated types have _____ values.
integer

8.
When should you use the cstdint header?
when you require an integer of a specific size
This header allows you to specify size of integers, both signed and unsigned.

9.
What is the purpose of the * 8 in calculating the long long integer size in the following code?
int main()
{
    long long int lli = 0;

    printf("sizeof long long int is %zd bits\n", sizeof(lli) * 8);
    return 0;
}
It converts bytes to bits.
There are 8 bits in a byte.

10.
When would you use the int32_t integer type?
when you need a signed integer with a fixed size of 32 bits
This is the correct format for a signed integer of 32 bits; you could also designate 8, 16, or 64 bit fixed sizes.

11.
What do you sacrifice when you use floating points in C++?
precision
Floating points can introduce rounding errors, so they should not be used when accuracy or precision is extremely important.

12.
Unions allow you to use the same memory for values of different types.
TRUE

13.
A typedef may be used as an alias for a type.
TRUE

14.
A function return type of void means _____.
no return value

15.
What is meant by C++ being a strongly typed language?
It means every value has a specific data type.
Data types determine both the size and interpretation of a value.

16.
In C++ every value has a _____.
Type

17.
A long int is always 64 bits.
FALSE

18.
The primitive integer types are guaranteed to be specific sizes.
FALSE

19.
Which example demonstrates a correct format to concatenate two primitive strings in C++?
const char * cstring = "String" " and another string";
This format concatenates string "String" with " and another string" using a pointer and const modifier.

20.
The static qualifier affects _____.
storage duration

21.
Once defined, a reference can never be re-assigned.
TRUE

22.
The types defined in the cstdint header are guaranteed to be consistent sizes.
TRUE

23.
Floating point types sacrifice precision for scale.
TRUE

24.
The fundamental C-string is an array of char terminated with _____
0

25.
A character escape sequence is introduced with the _____ character.
\

26.
The special nullptr value is used to provide an unambiguous null value for _____.
Pointers

27.
The auto type allows you to derive the type of a variable from _____.
the type of the initialization
the return type of a function
the type of an expression   
Ans : (All of these answers are corrects )



CH4: Operators
	Common operators
		Assignment  x = y
		Arithmentic  x = x + y
		compound --> x -= y 
		unary -  ++i, unary minus(-), increment(++), decrement(--), NOT(!), Addressof operator(&), sizeof()
		Logical 
		Bitwise
		ternary 
		Dynamic Memory Operator - specific to cpp only  - new-delete.cpp
		type cast - 
		size of  - working.cpp
		typeid - typeid.cpp
		operator precedence 

1.
The new and delete operators are used to allocate and deallocate memory.
TRUE

2.
When do prefix increment and decrement operators operate on variables?
before the variable returns a value
Using ++x or --x completes the operation before the variable is returned.

3.
The relational operators return a boolean value of one or zero.
TRUE

4.
Logical operators are used to operate on _____.
Boolean logical values

5.
The bitwise operators are used to operate on _____.
Individual bits

6.
The ternary conditional operator chooses one of _____ values based on a conditional expression.
Two

7.
The type cast operator converts a value from one type to another _____ type.
Compatible

8.
The sizeof operator returns a value of type _____.
size_t

9.
Which value would be returned for a in the printf function below?
int main()
{
    bool a = true;
    bool b = false;

    a = 10

    printf("a is %d\n", a);
    return 0;
}
1
Boolean operators are true (1) or false (0), and any non-0 integer evaluates to true.

10.
The type_info class is defined in the _____ header.
typeinfo

11.
Which code block demonstrates the correct usage of the ternary conditional operator?
int main() {
    int x = 10;
    int y = 23;
    const char * s = x < y ? "yes" : "no";

    puts(s);
    return 0;}
The ternary conditional operator has three operands: the condition, the return if the condition is true, and the return if the condition is false.

12.
In the expression 1 + 2 * 3 which operator is evaluated first?
Multiplication

13.
You see the following code block with the new operator allocating memory space for an object. What needs to be in a separate code block to prevent memory leaks?
    long int * ip;
    try {
        ip = new long int [count];
    } catch (std::bad_alloc & ba) {
        fprintf(stderr, "Cannot allocate memory (%s)\n", ba.what());
        return 1;
    }
the delete operator
The delete operator is used to deallocate space to free it from memory.

14.
Which operation will be executed first in the following code?
int main()
{
    int a = 8 * 2 + (32 + 4) / 13 - 8;
    printf("the value of a is %d", a);
return 0;
}
(32 + 4)
The parentheses operators have precedence over the other operators in the expression.


15.
The assignment operator _____ a value from one object to another.
Copies

16.
The compound assignment operators combine an operator with _____.
An assignment

17.
The postfix version of the increment operator returns the value _____ it increments.
Before



CH5: Functions 
	Overview 
		Basic building block 
		call by reference is used is you want to changes values to passed variables otherwise variable remains local to the function
		The return type, the name of the function, and the types of the function arguments are all combined to form the function signature
	Creation of function:
		via top of program
		via forward definition and declaring it later 
		via adding func.h where you can declare
	Passing a value to function:
		makes sure not to pass large values  to functions as it gets copied over to stack. rather pass it by reference or pointer
		internally, a reference is managed as a pointer, and so it's a relatively small amount of data that gets passed on the stack. By default, function parameters are passed by value in C++. You can pass pointers or references if you need to pass larger values, but you'll need to do so explicitly.
	Auto and static 
		Variables declared in a function default to automatic storage, if you want your data to be persistent, you may declare your variables as static
		non persistend data (auto) is defined in stack and each invocation function gets fresh stack of value
	Returing values and references 
	function pointers  - check jump.cpp
	ocerloading function - cpp checks for full function signature where as c required each function names to be unique - check volume.cpp
	variable number of arguments  - cstdarg lib - check variadic.cpp 
	recursive - factorial

1.
You run the following small program and notice i does not increment in the return value. Why?
void func() {
    int i = 5;
    printf("i is %d\n", i++);}

int main() {
    func();
    func();
    return 0;}
The variable i is in automatic storage.
`i` is a function, so it is created fresh on the stack each time the function calls it, and must be set to static to increment correctly.

2.
You cannot return a reference to _____.
Automatic storage

3.
A function pointer is _____.
a pointer to a function

4.
The following code is incomplete. How can you complete it to return a value of "x is 84" with the printf function?
int func( int i ) {
    return i * 2;}
int main() {
    printf("x is %d\n", x);
    return 0;}

// `int x = func(42)` passes the value 42 to the function `func` and returns that value times two, and then stores the value in variable `x`.
int func( int i ) {
    return i * 2;}
int main() {
    int x = func(42);
    printf("x is %d\n", x);
    return 0;}

5.
A function signature includes _____.
function name and number, order, and type of formal parameters

6.
How does C++ handle multiple functions with the same name?
The program will compile if the function signatures are different.
The function signature consists of the function's return type, name, and list of parameter types.

7.
When using a variadic function, the va_end() macro is always required.
TRUE

8.
All executable code in C++ happens in functions.
TRUE

9.
All functions must be declared before they are called
TRUE

10.
Function parameters are passed _____.
On the stack

11.
What is wrong with the following code?
int main() {
    puts("this is main()");
    func();
    return 0;
}

void func() {
    puts("this is func()");
}

The function func is not declared before it is called.
A function must be declared before it can be called.

12.
What is the best practice for passing larger values to a function?
by passing a reference
Passing reference values to functions helps to prevent security and stability problems.

13.
Automatic storage is _____.
The default for function data
Temporary (for the life of the function)
Stored on the stack
all of these answers --> Correct

14.
A recursive solution is always best.
FALSE


CH6: Classes and Objects

1.
How many constructors may a class have?
There is no limit

2.
Operator overloads define how an object uses common operators.
TRUE

3.
When would I choose to use non-member operator overloads?
When a constructor allows implicit conversions

4.
Which statement in the code below is the class destructor?
class C1 {
    int i;
public:
    C1();
    C1( int value );
    ~C1();
    void setValue( int value );
    int getValue(); };

~C1();

5.
Why does the following code fail to build and compile?
class A {
    int ia;
    int ib;
    int ic;};

int main() {
    A a(1, 2, 3);
    printf("ia is %d, ib is %d, ic is %d\n", a.ia, a.ib, a.ic);
    return 0;}
C++ classes default to private data members.
C++ classes default to private data members, and structures default to public data members.

6.
What is the purpose of separating the member functions from the class, as in the example code below?
class C1 {
    int i = 0;
public:
    void setvalue( int value );};

void C1::setvalue(int value) {
    i = value;}

to separate the implementation from the interface
The interface is the public data members, and the implementation is the member functions; it is a best practice to separate these.


7.
What is a member function used to deallocate and reset resources when an object is destroyed?
a destructor
A destructor is used after a constructor sets up and initializes an object.

8.
Class function members default to const-safe.
FALSE

9.
How could the main function below be completed to set and get the value of the class's private data member?
class C1 {
    int i = 0;
public:
    void setvalue( int value ) { i = value; }
    int getvalue() { return i; } };

int main() {
    int i = 47;
    C1 o1;}

int main() {
    int i = 47;
    C1 o1;
    o1.setvalue(i);
    printf("value is %d\n", o1.getvalue());
    return 0;}
Dot notation is used to access the public members, which can interface with the private data member.


10.
An object is _____.
Derived from a class

11.
Data members are usually _____ access.
private

12.
Class data members default to public access.
FALSE


CH7: Templates
	Generic type - any data type can be processed 
	temp. Func
	Temp Class. - LIFO stack. temp-class.cpp

Question 1 of 6
How does the following code use the template function to compare values "7" and "9" without specifying their type?
template <typename T>
T maxof ( T a, T b ) {
    return ( a > b ? a : b ); }
int main() {
    std::cout << maxof<int>( 7, 9 ) << std::endl;
    return 0; }
The compiler uses template argument deduction to deduce the type of the values.
Template argument deduction should always be tested, because it may not always give you the results you expect.

2.
Templates provide support for _____ programming
generic

3.
What is the value of a template class?
A class that is both type-safe and type-agnostic

4.
How do you declare a template in C++?
like a function or class declaration, preceded by the keyword "template" and a set of type identifiers
Templates will look like functions or classes, but they must be declared with the template keyword and the type identifiers.

5.
Which type of template is most useful for operating on containers of items?
template classes
Template classes can manipulate containers of items when the logic of the manipulation is independent of the type.

6.
What is a specialization?
Compiler-generated code for a template with a particular type


CH8: Standard Libraries
	Standard lib's are inherited from c. 

1.
How are headers in the C++ standard library differentiated from the C version of the same headers?
The C++ headers include a lowercase "c" at the beginning and no ".h" at the end.
The C++ standard library is inherited from the C language, so it includes the full definition of C.

2.
Which mode is being used in the following code sample to open the "testfile.txt" file?
int main() {
    const char * fn = "testfile.txt";

    FILE * f = fopen(fn, "w");
write mode
Write mode is specified by the "w" as the second argument in the `fopen` function.

3.
Why should you disregard the first random number generated by the C++ standard library's pseudo random number generator?
Some compilers may show a pattern with the first pseudo-random number.
Microsoft Visual Studio, for example, will display a visible pattern in its first number displayed.

4.
When do I need to open a file in binary mode?
when the file is not a text file

5.
What does the n represent in the C string functions from the header, like strncpy for example?
The "n" means the function uses a count argument to limit the number of characters on which it will operate.
Try to use the versions of these functions with "n" because they are more stable and safe.

6.
Use the _____ function to delete a file.
remove

7.
Which type is the errno value under the header in the C++ standard library, as represented in the following code? int main() { printf(Erasing file foo.barn); remove(foo.bar); printf(errno is: %dn, errno); perror(Cannot erase file); return 0;}
integer
The `errno` value will be an integer, and the `perror` function can be used to return a string explanation for the error code.

8.
The puts() function sends its output to the _____ stream.
stdout

9.
The print format specifiers provide formatting instructions for argument replacement strings.
TRUE

10.
When should you use the "b" argument when opening files with the fopen function?
when working with operating systems that treat text files differently than binary files
Some operating systems, including Microsoft Windows, translate line endings, which can alter the file unless you flag it as a binary file.

11.
Where would "filename.txt" be located after building and compiling the following code?
int main() {
    static const char * fn1 = "filename.txt";
    FILE * fh = fopen(fn1, "w");
    fclose(fh);
    return 0;}
The file would be in the same directory as the build's executable.
After compiling and running the executable, the file from this code would be found in the same directory as the executable.

12.
The C++ Standard Library is mostly inherited from C.
TRUE

13.
Why should you always use the function fgets instead of the function gets?
The fgets function allows you to declare a buffer size to increase security.
The `fgets` function uses the declared buffer size for bounds checking for added security.

14.
Which printf function would complete the following code to output the three declared variables?
int main() {
    int i = 5;
    long int li = 1234567890L;
    const char * s = "This is a string.";
    printf();
    return 0;}
printf("i is %d, li is %ld, s is %s\n", i, li, s);
This uses all the correct arguments to output the integer, long integer, and string variables from the code.

15.
What is the mode string?
It determines the file open mode.

16.
The srand() function is used to _____ the rand() function.
Seed

17.
The string functions are defined in the _____ header.
cstring

18.
To convert an errno to a string error message you may use _____.
strerror or perror

CH9: Standard Template Lib (STL)
	cpp standard 
	like 
		vector - Sequence containers  You can think of it as an object-oriented array
		list - double linked list  - optimized for faster inserts and deletes 
		set - ordered sequence container 
		map - key value pairs - associative container
		LIFO (stack), FIFO (queue), double ended containers (deque)
		Strings and iostring

1.
Use the _____ operator to concatenate STL strings.
+

2.
The cout class overloads the _____ operator to add values to the output stream.
Shift Left operator <<

3.
The exception class is designed to be inherited.
TRUE

4.
The following code uses the cin class to store one word of user input. Which function would store a complete multi-line string?
int main() {
    std::string istr;
    std::cout << "Please enter a greeting: ";
    std::cin >> istr;
    std::cout << "Input: " << istr << std::endl;
    return 0;}
std::cin.getline()
The `getline` function allows character inputs with a buffer size limit.

5.
The Standard Template Library is part of the C++ standard.
TRUE

6.
The STL vector is a flexible _____ container.
Sequence


7.
Which values would cout return for the size, front, and back elements in the following code?
int main() {
    std::cout << "vector from initializer list: " << std::endl;
    std::vector<int> vi1 = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    std::cout << "size: " << vi1.size() << std::endl;
    std::cout << "front: " << vi1.front() << std::endl;
    std::cout << "back: " << vi1.back() << std::endl;
    std::cout << std::endl;
    return 0;}
size 10, front 1, and back 10
The size of the vector is 10, with a 1 as the front value and 10 as the back value.

8.
Which example demonstrates a correct format to concatenate two strings using the C++ Standard Template Library?
int main() {
    std::string s1 = "String 1";
    std::string s2 = "String 2";
    std::cout << s1 + ":" + s2 << std::endl;
    std::cout << std::endl;
    return 0;}
The "+" sign is used to concatenate STL strings.



--------------------------------------------
C++ Templates and the STL: Bill Weinman
--------------------------------------------
Learning objectives
	Template fundamentals
	STL containers
	Accessing iterators
	Output, forward, and bidirectional iterators
	The transform function
	Transforming strings and types
	Arithmetic, relational, and logical functions
	STL algorithms

CH1: Templates
	A template is essentially a compiler abstraction that allows you to write generic code that applies to various types or classes without concern for the details of the type.
	when you call the function a specialization with required datatype is created.
	template classes are generally entirely contained in the header file and this does impact compile times.	
CH2: STL containers
	The STL array type is a fixed-size sequence container. The size of the array is defined when the array object is created. The size cannot change during the life of the array. The array object is available beginning with C++ 11. The array is designed to be fast and efficient. Although less functional than a vector, it carries no data other than its elements, and those elements are guaranteed to be stored in contiguous memory locations.
CH3: STL iterators
CH4: Transformations
CH5: STL Functions
CH6: STL Algorithm





-----------------------------------------------------
C++ Standard Template Library (STL): Eduardo Corpeño
-----------------------------------------------------

https://en.cppreference.com/w/
Open source c++ IDE
	1. Dev-C++ 
	2. Eclipse 
	3. VS Code community 
	4. XCODE
	5. onlinegdb.com

Generic Programming (Compile time polymorphism)
	Programming paradigm where data types are not specified in implementaion of code, but rather in its use


-----------------------------------------------------
Web Servers and APIs using C++ : Troy Miles
-----------------------------------------------------

Docker installation 
	https://docs.docker.com/desktop/install/mac-install/ 

Docker file location
	mpatel@blr-mpd67 cppbox % pwd
	/Users/mpatel/git/PycharmProjects/CPP_LinkdinLearning/Ex_Files_Web_Servers_APIs_C_PlusPlus/ExerciseFiles/Ch01/01_03/end/cppweb/cppbox
	mpatel@blr-mpd67 cppbox % ls -l
	total 8
	-rwxrwxrwx@ 1 mpatel  staff  284 Jun  6  2018 Dockerfile
	mpatel@blr-mpd67 cppbox % cat Dockerfile 
	FROM gcc:7.3.0

	RUN apt-get -qq update
	RUN apt-get -qq upgrade
	RUN apt-get -qq install cmake

	RUN apt-get -qq install libboost-all-dev=1.62.0.1
	RUN apt-get -qq install build-essential libtcmalloc-minimal4 && \
	ln -s /usr/lib/libtcmalloc_minimal.so.4 /usr/lib/libtcmalloc_minimal.so

Built command will take some time based on internet speed 
	mpatel@blr-mpd67 cppbox % docker build -t cppbox .
	[+] Building 217.7s (10/10) FINISHED                                                                                                                                                                                                                        
	=> [internal] load build definition from Dockerfile                                                                                                                                                                                                   0.0s
	=> => transferring dockerfile: 459B                                                                                                                                                                                                                   0.0s
	=> [internal] load .dockerignore                                                                                                                                                                                                                      0.0s
	=> => transferring context: 2B                                                                                                                                                                                                                        0.0s
	=> [internal] load metadata for docker.io/library/gcc:7.3.0                                                                                                                                                                                           5.3s
	=> [1/6] FROM docker.io/library/gcc:7.3.0@sha256:dd76a1c3ed21c917844a8b446d0337492bac62c481b40aa047995c2eddf712cb                                                                                                                                    70.7s
	=> => resolve docker.io/library/gcc:7.3.0@sha256:dd76a1c3ed21c917844a8b446d0337492bac62c481b40aa047995c2eddf712cb                                                                                                                                     0.0s
	=> => sha256:d6341e30912f12f56e18564a3b582853f65376766f5f9d641a68a724ed6db88f 10.74MB / 10.74MB                                                                                                                                                       5.5s
	=> => sha256:087a57faf9491b1b82a83e26bc8cc90c90c30e4a4d858b57ddd5b4c2c90095f6 4.34MB / 4.34MB                                                                                                                                                         2.2s
	=> => sha256:c73fc3aa861503f6020dd7739dc7c362c71477ea69926faec7b6069ac486afb5 9.38kB / 9.38kB                                                                                                                                                         0.0s
	=> => sha256:7b4132bbf7faaf9d64b30ff3e5edc0ea2c284d3c7a9004106b281d521c31ec47 2.22kB / 2.22kB                                                                                                                                                         0.0s
	=> => sha256:54f7e8ac135a5f502a6ee9537ef3d64b1cd2fa570dc0a40b4d3b6f7ac81e7486 45.32MB / 45.32MB                                                                                                                                                      24.5s
	=> => sha256:dd76a1c3ed21c917844a8b446d0337492bac62c481b40aa047995c2eddf712cb 2.06kB / 2.06kB                                                                                                                                                         0.0s
	=> => sha256:5d71636fb824265e30ff34bf20737c9cdc4f5af28b6bce86f08215c55b89bfab 50.06MB / 50.06MB                                                                                                                                                      27.1s
	=> => sha256:0c1db95989906f161007d8ef2a6ef6e0ec64bc15bf2c993fd002edbdfc7aa7df 213.21MB / 213.21MB                                                                                                                                                    59.4s
	=> => sha256:e9bc960296a9ebcb7d39cf27093838319dadd90872013bef7c953ec53affb3fb 108.32kB / 108.32kB                                                                                                                                                    25.4s
	=> => extracting sha256:54f7e8ac135a5f502a6ee9537ef3d64b1cd2fa570dc0a40b4d3b6f7ac81e7486                                                                                                                                                              1.8s
	=> => sha256:1ab3bd3c12a61e2f3ee6b0074150e96fd6bde9dc20330dd872c0208bb75aadf2 89.06MB / 89.06MB                                                                                                                                                      51.2s
	=> => extracting sha256:d6341e30912f12f56e18564a3b582853f65376766f5f9d641a68a724ed6db88f                                                                                                                                                              0.5s
	=> => extracting sha256:087a57faf9491b1b82a83e26bc8cc90c90c30e4a4d858b57ddd5b4c2c90095f6                                                                                                                                                              0.2s
	=> => sha256:ef87bdedb4658c411c3a4c38ca3f4381a0b5751b128fe5916a42a54c7233e676 12.14kB / 12.14kB                                                                                                                                                      27.7s
	=> => extracting sha256:5d71636fb824265e30ff34bf20737c9cdc4f5af28b6bce86f08215c55b89bfab                                                                                                                                                              2.1s
	=> => sha256:ad35dc85509d9552f0b7f235e131e7dc6444447ace2a7ea78566b196d4d60a87 2.17kB / 2.17kB                                                                                                                                                        28.4s
	=> => extracting sha256:0c1db95989906f161007d8ef2a6ef6e0ec64bc15bf2c993fd002edbdfc7aa7df                                                                                                                                                              7.5s
	=> => extracting sha256:e9bc960296a9ebcb7d39cf27093838319dadd90872013bef7c953ec53affb3fb                                                                                                                                                              0.0s
	=> => extracting sha256:1ab3bd3c12a61e2f3ee6b0074150e96fd6bde9dc20330dd872c0208bb75aadf2                                                                                                                                                              3.2s
	=> => extracting sha256:ef87bdedb4658c411c3a4c38ca3f4381a0b5751b128fe5916a42a54c7233e676                                                                                                                                                              0.0s
	=> => extracting sha256:ad35dc85509d9552f0b7f235e131e7dc6444447ace2a7ea78566b196d4d60a87                                                                                                                                                              0.0s
	=> [2/6] RUN apt-get -qq update                                                                                                                                                                                                                       5.9s
	=> [3/6] RUN apt-get -qq upgrade                                                                                                                                                                                                                     97.9s
	=> [4/6] RUN apt-get -qq install cmake                                                                                                                                                                                                                3.5s
	=> [5/6] RUN apt-get -qq install libboost-all-dev=1.62.0.1                                                                                                                                                                                           29.7s 
	=> [6/6] RUN apt-get -qq install build-essential libtcmalloc-minimal4 &&   ln -s /usr/lib/libtcmalloc_minimal.so.4 /usr/lib/libtcmalloc_minimal.so                                                                                                    1.6s 
	=> exporting to image                                                                                                                                                                                                                                 3.0s 
	=> => exporting layers                                                                                                                                                                                                                                3.0s 
	=> => writing image sha256:9f76ff1b16f49feaf01912b87a03a15348155d62cd5c985dc8fd09bb8eeee1f7                                                                                                                                                           0.0s 
	=> => naming to docker.io/library/cppbox                                                                                                                                                                                                              0.0s 
																																																																
	Use 'docker scan' to run Snyk tests against images to find vulnerabilities and learn how to fix them                                                                                                                                                        

Running Latest continer image:
	mpatel@blr-mpd67 cppbox % docker run -ti cppbox:latest bash
	root@acf9fb393551:/# df   
	Filesystem     1K-blocks    Used Available Use% Mounted on
	overlay         61202244 3855500  54205420   7% /
	tmpfs              65536       0     65536   0% /dev
	shm                65536       0     65536   0% /dev/shm
	/dev/vda1       61202244 3855500  54205420   7% /etc/hosts
	tmpfs            4024248       0   4024248   0% /proc/acpi
	tmpfs            4024248       0   4024248   0% /sys/firmware
	root@acf9fb393551:/# find /usr/ -name libboost*.* | head
	/usr/lib/x86_64-linux-gnu/libboost_signals.a
	/usr/lib/x86_64-linux-gnu/libboost_mpi_python-py27.a
	/usr/lib/x86_64-linux-gnu/libboost_python-py27.so.1.62.0
	/usr/lib/x86_64-linux-gnu/libboost_graph.so.1.62.0
	/usr/lib/x86_64-linux-gnu/libboost_atomic.a
	/usr/lib/x86_64-linux-gnu/libboost_locale.so.1.62.0
	/usr/lib/x86_64-linux-gnu/libboost_wserialization.so
	/usr/lib/x86_64-linux-gnu/libboost_math_tr1.a
	/usr/lib/x86_64-linux-gnu/libboost_filesystem.a
	/usr/lib/x86_64-linux-gnu/libboost_thread.a
	root@acf9fb393551:/# exit
	exit
	mpatel@blr-mpd67 cppbox % 

Make a volume to save files. 
	mpatel@blr-mpd67 cppweb % docker run -v /Users/mpatel/git/PycharmProjects/CPP_LinkdinLearning/Ex_Files_Web_Servers_APIs_C_PlusPlus/ExerciseFiles/Ch01/01_03/end/cppweb:/usr/src/cppweb -ti cppbox:latest bash
	root@4093f7fc711f:/# cd /usr/src/cppweb
	root@4093f7fc711f:/usr/src/cppweb# touch MY_FILE.txt
	root@4093f7fc711f:/usr/src/cppweb# ls
	MY_FILE.txt  cppbox

	#We can see that in out Desktop Path as well.
	mpatel@blr-mpd67 cppweb % ls
	MY_FILE.txt cppbox

Now Create binary with makefile on continer
	mpatel@blr-mpd67 hello_crow % docker run -v /Users/mpatel/git/PycharmProjects/CPP_LinkdinLearning/Ex_Files_Web_Servers_APIs_C_PlusPlus/ExerciseFiles/Ch01/01_03/end/cppweb:/usr/src/cppweb -ti cppbox:latest bash
	root@0cfb1bdab67b:/# cd /usr/src/cppweb
	root@0cfb1bdab67b:/usr/src/cppweb# cd hello_crow/
	root@0cfb1bdab67b:/usr/src/cppweb/hello_crow# cd build/
	root@0cfb1bdab67b:/usr/src/cppweb/hello_crow/build# cmake ..
	-- The C compiler identification is GNU 7.3.0
	-- The CXX compiler identification is GNU 7.3.0
	-- Check for working C compiler: /usr/bin/cc
	-- Check for working C compiler: /usr/bin/cc -- works
	-- Detecting C compiler ABI info
	-- Detecting C compiler ABI info - done
	-- Detecting C compile features
	-- Detecting C compile features - done
	-- Check for working CXX compiler: /usr/local/bin/c++
	-- Check for working CXX compiler: /usr/local/bin/c++ -- works
	-- Detecting CXX compiler ABI info
	-- Detecting CXX compiler ABI info - done
	-- Detecting CXX compile features
	-- Detecting CXX compile features - done
	-- Boost version: 1.62.0
	-- Found the following Boost libraries:
	--   system
	--   filesystem
	-- Looking for pthread.h
	-- Looking for pthread.h - found
	-- Looking for pthread_create
	-- Looking for pthread_create - not found
	-- Check if compiler accepts -pthread
	-- Check if compiler accepts -pthread - yes
	-- Found Threads: TRUE  
	-- Configuring done
	-- Generating done
	-- Build files have been written to: /usr/src/cppweb/hello_crow/build
	root@0cfb1bdab67b:/usr/src/cppweb/hello_crow/build# make 
	[ 50%] Building CXX object CMakeFiles/hello_crow.dir/main.cpp.o
	[100%] Linking CXX executable hello_crow
	[100%] Built target hello_crow
	root@0cfb1bdab67b:/usr/src/cppweb/hello_crow/build# ls
	CMakeCache.txt	CMakeFiles  Makefile  cmake_install.cmake  hello_crow
	
	root@0cfb1bdab67b:/usr/src/cppweb/hello_crow# cat main.cpp 
	#include "crow/crow.h"
	using namespace std;

	int main(int argc, char* argv[]) {
	crow::SimpleApp app;

	CROW_ROUTE(app, "/")
		([](){
		return "<div><h1>Hello, Crow.</h1></div>";
		});

	char* port = getenv("PORT");
	uint16_t iPort = static_cast<uint16_t>(port != NULL? stoi(port): 18080);
	cout << "PORT = " << iPort << "\n";
	app.port(iPort).multithreaded().run();
	}
	
	root@0cfb1bdab67b:/usr/src/cppweb/hello_crow# cat CMakeLists.txt 
	cmake_minimum_required(VERSION 3.7)

	project(hello_crow)

	set(CMAKE_CXX_STANDARD 11)
	set(THREADS_PREFER_PTHREAD_FLAG ON)

	find_package(Boost COMPONENTS system filesystem REQUIRED)
	find_package(Threads)

	include_directories(${Boost_INCLUDE_DIRS})
	add_executable(hello_crow main.cpp)
	target_link_libraries(hello_crow ${Boost_LIBRARIES} Threads::Threads)
	root@0cfb1bdab67b:/usr/src/cppweb/hello_crow# 

Binary looks good 
	root@0cfb1bdab67b:/usr/src/cppweb/hello_crow/build# ./hello_crow 
	PORT = 18080
	(2022-10-14 09:42:16) [INFO    ] Crow/0.1 server is running at 0.0.0.0:18080 using 6 threads
	(2022-10-14 09:42:16) [INFO    ] Call `app.loglevel(crow::LogLevel::Warning)` to hide Info level logs.

Now open port from machine. 
	mpatel@blr-mpd67 hello_crow % docker run -v /Users/mpatel/git/PycharmProjects/CPP_LinkdinLearning/Ex_Files_Web_Servers_APIs_C_PlusPlus/ExerciseFiles/Ch01/01_03/end/cppweb:/usr/src/cppweb -p 8080:18080 -e PORT=18080 cppbox:latest /usr/src/cppweb/hello_crow/build/hello_crow
	PORT = 18080
	(2022-10-14 09:49:13) [INFO    ] Crow/0.1 server is running at 0.0.0.0:18080 using 6 threads
	(2022-10-14 09:49:13) [INFO    ] Call `app.loglevel(crow::LogLevel::Warning)` to hide Info level logs.
	(2022-10-14 09:49:20) [INFO    ] Request: 172.17.0.1:65126 0x7efd3c000960 HTTP/1.1 GET /
	(2022-10-14 09:49:20) [INFO    ] Response: 0x7efd3c000960 / 200 0
	^C(2022-10-14 09:49:32) [INFO    ] Exiting.

Deploying on Heroku.
	Create Heroku sign up https://signup.heroku.com/
	
	1. "Containerize" our app
	2. Heroku login 
	3. Create a Heroku app
	4. Push the container and release it
	5. test in browser

	#1. Open One tab a login into latest image.

		mpatel@blr-mpd67 DockerizedWebServer % pwd
		/Users/mpatel/git/mitul19/python-scripts/CppLearning/DockerizedWebServer

		mpatel@blr-mpd67 DockerizedWebServer % docker run -ti cppbox:latest

		root@84534c32ccba:/usr/src/cppweb# ls -l
		total 24
		-rw-r--r-- 1 503 dialout  352 Oct 14 08:56 CMakeLists.txt
		-rw-r--r-- 1 503 dialout   67 Oct 17 08:24 Dockerfile
		-rwxrwxrwx 1 503 dialout  284 Jun  5  2018 Dockerfile.tmp
		drwxr-xr-x 3 503 dialout 4096 Oct 14 10:03 build
		drwxr-xr-x 3 503 dialout 4096 Oct 14 09:29 crow
		-rw-r--r-- 1 503 dialout  383 Oct 14 09:20 main.cpp

		root@84534c32ccba:/usr/src/cppweb# cat Dockerfile
		FROM hello_crow
		WORKDIR /usr/src/cppweb/build
		CMD ["./hello_crow"]
		root@84534c32ccba:/usr/src/cppweb# cd build/
		root@84534c32ccba:/usr/src/cppweb/build# ls
		CMakeCache.txt	CMakeFiles  Makefile  cmake_install.cmake  hello_crow


	#2. Open another tab create heroku contianer, push app image and test web app.

		mpatel@blr-mpd67 DockerizedWebServer % docker cp . 84534c32ccba:/usr/src/cppweb/

		mpatel@blr-mpd67 DockerizedWebServer % docker commit 84534c32ccba hello_crow:latest
		sha256:f2eab19674073ad9123e3f1095d4b1bb27d68ed64bb35d234ef18e4e6524b268

		mpatel@blr-mpd67 DockerizedWebServer % heroku login

		mpatel@blr-mpd67 DockerizedWebServer % heroku container:login

		mpatel@blr-mpd67 DockerizedWebServer % heroku create
		Creating app... done, ⬢ obscure-forest-41395
		https://obscure-forest-41395.herokuapp.com/ | https://git.heroku.com/obscure-forest-41395.git

		mpatel@blr-mpd67 DockerizedWebServer % docker build -t hello_crow .
		[+] Building 0.2s (6/6) FINISHED                                                                                                                                                                                                                            
		=> [internal] load build definition from Dockerfile                                                                                                                                                                                                   0.0s
		=> => transferring dockerfile: 36B                                                                                                                                                                                                                    0.0s
		=> [internal] load .dockerignore                                                                                                                                                                                                                      0.0s
		=> => transferring context: 2B                                                                                                                                                                                                                        0.0s
		=> [internal] load metadata for docker.io/library/hello_crow:latest                                                                                                                                                                                   0.0s
		=> [1/2] FROM docker.io/library/hello_crow                                                                                                                                                                                                            0.0s
		=> [2/2] WORKDIR /usr/src/cppweb/build                                                                                                                                                                                                                0.0s
		=> exporting to image                                                                                                                                                                                                                                 0.0s
		=> => exporting layers                                                                                                                                                                                                                                0.0s
		=> => writing image sha256:d8e704435b6520d870d34302a5875e64459b0a5244f5c78469b377f59dee019b                                                                                                                                                           0.0s
		=> => naming to docker.io/library/hello_crow                                                                                                                                                                                                          0.0s

		Use 'docker scan' to run Snyk tests against images to find vulnerabilities and learn how to fix them

		mpatel@blr-mpd67 DockerizedWebServer % heroku container:push web -a obscure-forest-41395
		=== Building web (/Users/mpatel/git/mitul19/python-scripts/CppLearning/DockerizedWebServer/Dockerfile)
		[+] Building 0.1s (6/6) FINISHED                                                                                                                                                                                                                            
		=> [internal] load build definition from Dockerfile                                                                                                                                                                                                   0.0s
		=> => transferring dockerfile: 36B                                                                                                                                                                                                                    0.0s
		=> [internal] load .dockerignore                                                                                                                                                                                                                      0.0s
		=> => transferring context: 2B                                                                                                                                                                                                                        0.0s
		=> [internal] load metadata for docker.io/library/hello_crow:latest                                                                                                                                                                                   0.0s
		=> [1/2] FROM docker.io/library/hello_crow                                                                                                                                                                                                            0.0s
		=> [2/2] WORKDIR /usr/src/cppweb/build                                                                                                                                                                                                                0.0s
		=> exporting to image                                                                                                                                                                                                                                 0.0s
		=> => exporting layers                                                                                                                                                                                                                                0.0s
		=> => writing image sha256:0764dc65c1bb20d14fbc4d65e8cb9603d643688046b5b8c2e85ca3fcf070b0bf                                                                                                                                                           0.0s
		=> => naming to registry.heroku.com/obscure-forest-41395/web                                                                                                                                                                                          0.0s
		Use 'docker scan' to run Snyk tests against images to find vulnerabilities and learn how to fix them
		=== Pushing web (/Users/mpatel/git/mitul19/python-scripts/CppLearning/DockerizedWebServer/Dockerfile)
		Using default tag: latest
		The push refers to repository [registry.heroku.com/obscure-forest-41395/web]
		5f70bf18a086: Mounted from quiet-reef-29558/web 
		4d99f68b51b6: Pushed 
		b31cecd674af: Mounted from quiet-reef-29558/web 
		ca110e4b933f: Mounted from quiet-reef-29558/web 
		d48e177a9a21: Mounted from quiet-reef-29558/web 
		cd3af5c34a0d: Mounted from quiet-reef-29558/web 
		842d54faff53: Mounted from quiet-reef-29558/web 
		b003325e95db: Mounted from quiet-reef-29558/web 
		3cfedeb19614: Mounted from quiet-reef-29558/web 
		9e0f305a3f23: Mounted from quiet-reef-29558/web 
		39606564e8a4: Mounted from quiet-reef-29558/web 
		e02b32b1ff99: Mounted from quiet-reef-29558/web 
		f75e64f96dbc: Mounted from quiet-reef-29558/web 
		8f7ee6d76fd9: Mounted from quiet-reef-29558/web 
		c23711a84ad4: Mounted from quiet-reef-29558/web 
		90d1009ce6fe: Mounted from quiet-reef-29558/web 
		latest: digest: sha256:18dd81ae222588dcebce5d004fdf40816e9a1c6e57989a54d673a672f08bf03c size: 3897
		Your image has been successfully pushed. You can now release it with the 'container:release' command.

		mpatel@blr-mpd67 DockerizedWebServer % heroku container:release web -a obscure-forest-41395
		Releasing images web to obscure-forest-41395... done

		mpatel@blr-mpd67 DockerizedWebServer % heroku open -a obscure-forest-41395

	Pushing Image to dockerhub.

		mpatel@blr-mpd67 DockerizedWebServer % docker login        
		Authenticating with existing credentials...
		Login Succeeded

		mpatel@blr-mpd67 DockerizedWebServer % docker images
		REPOSITORY                                     TAG       IMAGE ID       CREATED          SIZE
		registry.heroku.com/obscure-forest-41395/web   latest    0764dc65c1bb   19 minutes ago   2GB
		hello_crow                                     latest    d8e704435b65   20 minutes ago   2GB
		<none>                                         <none>    f2eab1967407   23 minutes ago   2GB
		cppbox                                         latest    9f76ff1b16f4   3 days ago       2GB

		mpatel@blr-mpd67 DockerizedWebServer % docker tag d8e704435b65 patelmitul87/hello_crow:latest

		mpatel@blr-mpd67 DockerizedWebServer % docker images                                         
		REPOSITORY                                     TAG       IMAGE ID       CREATED          SIZE
		registry.heroku.com/obscure-forest-41395/web   latest    0764dc65c1bb   21 minutes ago   2GB
		patelmitul87/hello_crow                        latest    d8e704435b65   21 minutes ago   2GB
		hello_crow                                     latest    d8e704435b65   21 minutes ago   2GB
		<none>                                         <none>    f2eab1967407   25 minutes ago   2GB
		cppbox                                         latest    9f76ff1b16f4   3 days ago       2GB

		mpatel@blr-mpd67 DockerizedWebServer % docker push patelmitul87/hello_crow
		Using default tag: latest
		The push refers to repository [docker.io/patelmitul87/hello_crow]
		5f70bf18a086: Pushed 
		4d99f68b51b6: Pushed 
		b31cecd674af: Pushed 
		ca110e4b933f: Pushed 
		d48e177a9a21: Pushed 
		cd3af5c34a0d: Pushed 
		842d54faff53: Pushed 
		b003325e95db: Mounted from library/gcc 
		3cfedeb19614: Mounted from library/gcc 
		9e0f305a3f23: Mounted from library/gcc 
		39606564e8a4: Mounted from library/gcc 
		e02b32b1ff99: Mounted from library/gcc 
		f75e64f96dbc: Mounted from library/gcc 
		8f7ee6d76fd9: Mounted from library/gcc 
		c23711a84ad4: Mounted from library/gcc 
		90d1009ce6fe: Mounted from library/gcc 
		latest: digest: sha256:77a191fbd51a09de176be94c9c1e9d607151b05d0dacd879ab2202d14d378a5c size: 3691
		mpatel@blr-mpd67 DockerizedWebServer % 

	check https://hub.docker.com/repositories

Building Website

	Serving HTML index page.
	
		mpatel@blr-mpd67 DockerizedWebServer % docker run -v /Users/mpatel/git/mitul19/python-scripts/CppLearning/DockerizedWebServer:/usr/src/cppweb -ti hello_crow:latest bash

		root@8b8dc597d4e3:/usr/src/cppweb# cat main.cpp 
		#include "crow/crow.h"
		using namespace std;
		using namespace crow;

		int main(int argc, char* argv[]) {
		crow::SimpleApp app;

		// Simple write to any base route.
		// CROW_ROUTE(app, "/")
		//   ([](){
		//     return "<div><h1>Hello, Crow.</h1></div>";
		//   });

		// Simple index.html serving example.
		CROW_ROUTE(app, "/")
		([](const request &req, response &res){
			ifstream in("public/index.html", ifstream::in);
			if(in){
			ostringstream contents;
			contents << in.rdbuf();
			in.close();
			res.write(contents.str());
			} else {
			res.write("Not Found");
			}
			res.end();
		});

		char* port = getenv("PORT");
		uint16_t iPort = static_cast<uint16_t>(port != NULL? stoi(port): 18080);
		cout << "PORT = " << iPort << "\n";
		app.port(iPort).multithreaded().run();
		}

		root@8b8dc597d4e3:/usr/src/cppweb# cd build/
		root@8b8dc597d4e3:/usr/src/cppweb/build# make
		Scanning dependencies of target hello_crow
		[ 50%] Building CXX object CMakeFiles/hello_crow.dir/main.cpp.o
		[100%] Linking CXX executable hello_crow
		[100%] Built target hello_crow

	Running Server.
		mpatel@blr-mpd67 DockerizedWebServer % docker run -v /Users/mpatel/git/mitul19/python-scripts/CppLearning/DockerizedWebServer:/usr/src/cppweb -p 8080:8080 -e PORT=8080 hello_crow:latest /usr/src/cppweb/build/hello_crow
		PORT = 8080

		(2022-10-17 09:56:08) [INFO    ] Crow/0.1 server is running at 0.0.0.0:8080 using 6 threads
		(2022-10-17 09:56:08) [INFO    ] Call `app.loglevel(crow::LogLevel::Warning)` to hide Info level logs.
		PORT = 8080
		(2022-10-17 09:56:17) [INFO    ] Request: 172.17.0.1:55684 0x25701f0 HTTP/1.1 GET /
		(2022-10-17 09:56:17) [INFO    ] Response: 0x25701f0 / 200 0

	Checking it via local CURL we see not found for index.html which is due to running it from build folder so we need to come one level up to access.
		mpatel@blr-mpd67 DockerizedWebServer % curl -D - http://localhost:8080/;echo
		HTTP/1.1 200 OK
		Content-Length: 9
		Server: Crow/0.1
		Date: Mon, 17 Oct 2022 09:56:35 GMT

		Not Found
		mpatel@blr-mpd67 DockerizedWebServer % 
	
	Modify main.cpp and MAKE it.

		//     ifstream in("../public/index.html", ifstream::in);

		root@a57f390236b2:/usr/src/cppweb/build# make
		Scanning dependencies of target hello_crow
		[ 50%] Building CXX object CMakeFiles/hello_crow.dir/main.cpp.o
		[100%] Linking CXX executable hello_crow
		[100%] Built target hello_crow

	Re run app and we can see it serving index.html

		mpatel@blr-mpd67 DockerizedWebServer % docker run -v /Users/mpatel/git/mitul19/python-scripts/CppLearning/DockerizedWebServer:/usr/src/cppweb -p 8080:8080 -e PORT=8080 hello_crow:latest /usr/src/cppweb/build/hello_crow
		PORT = 8080
		PORT = 8080
		(2022-10-17 10:00:44) [INFO    ] Crow/0.1 server is running at 0.0.0.0:8080 using 6 threads
		(2022-10-17 10:00:44) [INFO    ] Call `app.loglevel(crow::LogLevel::Warning)` to hide Info level logs.
		(2022-10-17 10:00:49) [INFO    ] Request: 172.17.0.1:62836 0xc701f0 HTTP/1.1 GET /
		(2022-10-17 10:00:49) [INFO    ] Response: 0xc701f0 / 200 0
		mpatel@blr-mpd67 DockerizedWebServer % curl -D - http://localhost:8080/;echo
		HTTP/1.1 200 OK
		Content-Length: 182
		Server: Crow/0.1
		Date: Mon, 17 Oct 2022 10:00:49 GMT

		<!DOCTYPE html>
		<html lang="en">
		<head>
			<meta charset="utf-8">
			<title>Crow C++</title>
		</head>
		<body>
			<div><h1>Hello, Crow, its your webpage !!</h1></div>
		</body>
		</html>
	
	Static content serving via better route functions and CSS, JS and Image inside public folder
	update main.cpp which should include sendHtml(), sendImage(), sendScript(), sendStyle() which refers sendFile() to fetch appropriate files.

		mpatel@blr-mpd67 DockerizedWebServer % docker run -v /Users/mpatel/git/mitul19/python-scripts/CppLearning/DockerizedWebServer:/usr/src/cppweb -ti hello_crow:latest bash
		root@5332183b5f83:/usr/src/cppweb/build# make
		Scanning dependencies of target hello_crow
		[ 50%] Building CXX object CMakeFiles/hello_crow.dir/main.cpp.o
		[100%] Linking CXX executable hello_crow
		[100%] Built target hello_crow

		mpatel@blr-mpd67 DockerizedWebServer % docker run -v /Users/mpatel/git/mitul19/python-scripts/CppLearning/DockerizedWebServer:/usr/src/cppweb -p 8080:8080 -e PORT=8080 hello_crow:latest /usr/src/cppweb/build/hello_crow
		PORT = 8080
		(2022-10-17 10:51:30) [INFO    ] Crow/0.1 server is running at 0.0.0.0:8080 using 6 threads
		(2022-10-17 10:51:30) [INFO    ] Call `app.loglevel(crow::LogLevel::Warning)` to hide Info level logs.
		PORT = 8080
		(2022-10-17 10:51:36) [INFO    ] Request: 172.17.0.1:64202 0x7f86bc000960 HTTP/1.1 GET /
		(2022-10-17 10:51:36) [INFO    ] Response: 0x7f86bc000960 / 200 0
		(2022-10-17 10:51:36) [INFO    ] Request: 172.17.0.1:64202 0x7f86bc000960 HTTP/1.1 GET /styles/styles.css
		(2022-10-17 10:51:36) [INFO    ] Request: 172.17.0.1:64200 0xf54520 HTTP/1.1 GET /scripts/test.js
		(2022-10-17 10:51:36) [INFO    ] Response: 0xf54520 /scripts/test.js 200 0
		(2022-10-17 10:51:36) [INFO    ] Response: 0x7f86bc000960 /styles/styles.css 200 0
		(2022-10-17 10:51:36) [INFO    ] Request: 172.17.0.1:64200 0xf54520 HTTP/1.1 GET /images/test.jpg
		(2022-10-17 10:51:36) [INFO    ] Response: 0xf54520 /images/test.jpg 200 0
	
		mpatel@blr-mpd67 DockerizedWebServer % curl -D - http://localhost:8080/;echo
		HTTP/1.1 200 OK
		Content-Type: text/html
		Content-Length: 285
		Server: Crow/0.1
		Date: Mon, 17 Oct 2022 10:51:47 GMT

		<!DOCTYPE html>
		<html lang="en">
		<head>
		<meta charset="utf-8">
		<title>Crow C++</title>
		<link rel="stylesheet" href="styles/styles.css">
		<script src="scripts/test.js"></script>
		</head>
		<body>
		<div><h1>Greeting, Crow.</h1></div>
		<img src="images/test.jpg" />
		</body>
		</html>

Create mongo db set up and upload JSON file.
	
	installation guide --> https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-os-x/

		mpatel@blr-mpd67 ~ % brew update

		mpatel@blr-mpd67 ~ % brew install mongodb-community@6.0

		mpatel@blr-mpd67 ~ % which mongoimport
		/usr/local/bin/mongoimport

		mpatel@blr-mpd67 ~ % which mongod     
		/usr/local/bin/mongod

		mpatel@blr-mpd67 ~ % brew services start mongodb-community@6.0
		==> Tapping homebrew/services
		Cloning into '/usr/local/Homebrew/Library/Taps/homebrew/homebrew-services'...
		remote: Enumerating objects: 2139, done.
		remote: Counting objects: 100% (33/33), done.
		remote: Compressing objects: 100% (25/25), done.
		remote: Total 2139 (delta 11), reused 25 (delta 8), pack-reused 2106
		Receiving objects: 100% (2139/2139), 600.69 KiB | 4.20 MiB/s, done.
		Resolving deltas: 100% (948/948), done.
		Tapped 1 command (45 files, 756.7KB).
		==> Successfully started `mongodb-community` (label: homebrew.mxcl.mongodb-community)

		mpatel@blr-mpd67 ~ % brew services list
		Name              Status  User   File
		mongodb-community started mpatel ~/Library/LaunchAgents/homebrew.mxcl.mongodb-community.plist
		unbound           none 

		Mongo import work:
		mpatel@blr-mpd67 04_02 % mongoimport --host 127.0.0.1:27017 --db=test --collection=contacts --file=contacts.json --jsonArray
		2022-10-21T15:27:14.576+0530	connected to: mongodb://127.0.0.1:27017/
		2022-10-21T15:27:14.710+0530	100 document(s) imported successfully. 0 document(s) failed to import.
		mpatel@blr-mpd67 04_02 % ls 
		contacts.json

		mpatel@blr-mpd67 ~ % mongosh
		Current Mongosh Log ID:	63526a90676ca23bb13ff3f3
		Connecting to:		mongodb://127.0.0.1:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+1.6.0
		Using MongoDB:		6.0.1
		Using Mongosh:		1.6.0
		test> db
		test
		test> show collections
		contacts
		test>


-----------------------------------------------------
C++ Best Practices for Developers : Troy Miles
-----------------------------------------------------
Dont ignore Warning those may be generally bugs.
Always set highest level of warnings 
static analyzers (Eclipse and Visual Studio IDEs have built in tools and plugings, cppcheck, clang-static analyzer included with compiler, coverity, IKOS)

See static analyzer in use.
	clang generated only warning and made code
		mpatel@blr-mpd67 02_04 % clang++ -std=c++17 -Wall main.cpp
		main.cpp:5:7: warning: unused variable 'j' [-Wunused-variable]
		int j = *p;
			^
		main.cpp:11:21: warning: explicitly assigning value of variable of type 'int' to itself [-Wself-assign]
		if (uninitialized = uninitialized) {
			~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~
		main.cpp:11:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
		if (uninitialized = uninitialized) {
			~~~~~~~~~~~~~~^~~~~~~~~~~~~~~
		main.cpp:11:21: note: place parentheses around the assignment to silence this warning
		if (uninitialized = uninitialized) {
							^
			(                            )
		main.cpp:11:21: note: use '==' to turn this assignment into an equality comparison
		if (uninitialized = uninitialized) {
							^
							==
		main.cpp:9:7: warning: unused variable 'j' [-Wunused-variable]
		int j = 42;
			^
		main.cpp:11:23: warning: variable 'uninitialized' is uninitialized when used here [-Wuninitialized]
		if (uninitialized = uninitialized) {
							^~~~~~~~~~~~~
		main.cpp:10:20: note: initialize the variable 'uninitialized' to silence this warning
		int uninitialized;
						^
							= 0
		main.cpp:20:3: warning: array index 3 is past the end of the array (which contains 3 elements) [-Warray-bounds]
		ages[3] = 35;
		^    ~
		main.cpp:17:3: note: array 'ages' declared here
		int ages[3];
		^
		6 warnings generated.
		mpatel@blr-mpd67 02_04 %
		mpatel@blr-mpd67 02_04 % ls 
		a.out    main.cpp
	
	cppcheck did good job in finding all bad errors and code checks.
		mpatel@blr-mpd67 02_04 % cppcheck --enable=all --inconclusive --library=posix main.cpp
		Checking main.cpp ...
		main.cpp:20:7: error: Array 'ages[3]' accessed at index 3, which is out of bounds. [arrayIndexOutOfBounds]
		ages[3] = 35;
			^
		main.cpp:5:12: error: Dereferencing 'p' after it is deallocated / released [deallocuse]
		int j = *p;
				^
		main.cpp:11:21: warning: Redundant assignment of 'uninitialized' to itself. [selfAssignment]
		if (uninitialized = uninitialized) {
							^
		main.cpp:24:11: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
			total += age;
				^
		main.cpp:11:23: error: Uninitialized variable: uninitialized [uninitvar]
		if (uninitialized = uninitialized) {
							^
		main.cpp:5:9: style: Variable 'j' is assigned a value that is never used. [unreadVariable]
		int j = *p;
				^
		main.cpp:9:9: style: Variable 'j' is assigned a value that is never used. [unreadVariable]
		int j = 42;
				^
		main.cpp:11:21: style: Variable 'uninitialized' is assigned a value that is never used. [unreadVariable]
		if (uninitialized = uninitialized) {
							^
		nofile:0:0: information: Cppcheck cannot find all the include files (use --check-config for details) [missingIncludeSystem]

		mpatel@blr-mpd67 02_04 % 	
	
	One more example.
	we can see errors via cppcheck and its showm mem leak on buffer, buffer getting out of bounds, arrayIndexOutOfBounds, and invalidContainer
	but with clang it was compiled and worked with junk outputs. 
		mpatel@blr-mpd67 02_06 % cppcheck --enable=all --inconclusive --library=posix bad.cpp               
		Checking bad.cpp ...
		bad.cpp:17:25: error: Array 'houseCats[2]' accessed at index 2, which is out of bounds. [arrayIndexOutOfBounds]
		std::cout << houseCats[2].name << std::endl;
								^
		bad.cpp:22:10: error: Buffer is accessed out of bounds: buff [bufferAccessOutOfBounds]
		strcpy(buff, str);
				^
		bad.cpp:21:14: note: Assign buff, buffer with size 8
		char *buff = new char[8];
					^
		bad.cpp:22:10: note: Buffer overrun
		strcpy(buff, str);
				^
		bad.cpp:26:5: error: Memory leak: buff [memleak]
			return;
			^
		bad.cpp:40:30: error: inconclusive: Using iterator to local container 'items' that may be invalid. [invalidContainer]
		for (iter = items.begin(); iter != items.end(); ++iter) {
									^
		bad.cpp:40:26: note: Iterator to container is created here.
		for (iter = items.begin(); iter != items.end(); ++iter) {
								^
		bad.cpp:41:15: note: Assuming condition is true.
			if (*iter == 2) {
					^
		bad.cpp:41:15: note: Assuming condition is true.
			if (*iter == 2) {
					^
		bad.cpp:40:35: note: Assuming condition is true.
		for (iter = items.begin(); iter != items.end(); ++iter) {
										^
		bad.cpp:42:13: note: After calling 'erase', iterators or references to the container's data may be invalid .
			items.erase(iter);
					^
		bad.cpp:35:20: note: Variable created here.
		std::vector<int> items;
						^
		bad.cpp:40:30: note: Using iterator to local container 'items' that may be invalid.
		for (iter = items.begin(); iter != items.end(); ++iter) {
									^
		nofile:0:0: information: Cppcheck cannot find all the include files (use --check-config for details) [missingIncludeSystem]

		mpatel@blr-mpd67 02_06 % clang++ -std=c++17 -Wall bad.cpp 
		bad.cpp:17:16: warning: array index 2 is past the end of the array (which contains 2 elements) [-Warray-bounds]
		std::cout << houseCats[2].name << std::endl;
					^         ~
		bad.cpp:14:3: note: array 'houseCats' declared here
		Cat houseCats[] = {{"Meowmix",    "black", 9, 12},
		^
		1 warning generated.
		mpatel@blr-mpd67 02_06 % ls
		a.out   bad.cpp
		mpatel@blr-mpd67 02_06 % ./a.out 
		Meowmix
		IN??+A]?l?0IN???
		mpatel@blr-mpd67 02_06 % ls
		a.out   bad.cpp out.txt
		mpatel@blr-mpd67 02_06 % cat out.txt 
		Hello World%                                                                                                                                                                                                                                               
		mpatel@blr-mpd67 02_06 %
	
	auto tells compiler to deduce the type of a variable
	auto forces initialization of Variables
	C++ will loop a range of values
	can iterate over all STL containers, Strings and arrays
	you can add support of range based for loops to your own types by supporting the iterator interface
	Less reason to use bug prone for loop with indexes
	ENUMs
		Must use scope resolution operator
		Enums no longer exported to the surrounding scope
		redefination of type is no longer an issue 
		implicit conversion is no longer allowed
		prefer strongly typed enums to enums
	Lambdas
		A Lambdas expression is an unnamed function object
		Use a Lambdas to write local function of limited use
		Use a lambda for complex initialization
		prefer a lambda expression to std::bind 
	variadic template function
		template<typename T typename ... Args>
		typename.. Ts - template parameter pack
		Type of each parameter can be different
		Must have a base case to accept one parameter
		Prefer variadic template function to variadic functions 
	map, filter and reduce
		c++ seems to lack them, but STL does have something closer 
		std::transform, std::for_each -- replace map
		std::copy_if, std::remove_if -- replace filter
		std::accumulate -- replaces reduce
	size_t 
		it is basic unsigned integer; size depends on system
		it can improve code's portability and efficiency
		For indexing containers, you should use size_type also known as size_t
	Auto
		since c++14, you can use auto as retrun type
		With auto, all returns must have the same type
	The Filesystem Library
		based on Boost library filesystem

	Which Pointer ?
		std::shared_ptr  --> overhead is higher. reference counter associated, each copy makes reference go up. count goes down when it goes out of scope. give automatic lifetime management
		std::unique_ptr --> single ownership, no copying allowed but does support move_semantics. 
		std::weak_ptr --> rarely used 
	rule of zero,Three, and five 
		There are 5 special functions
			copy constructor, copy assignment constructor, move constructor, move assignment constructor and destructor
			Rule of 0 -> dont create any of these functions, complier's implementaion is usually correct and exactly what you need 
			Rule of 5 -> if you create create them all, not creating all is source of very subtle bugs
			Rule of 3 -> move semantics added in c++ 11 onwards
	Const
		Any variable which is not going to change should be made const
		it helps compiler, make your intentions clear, can result in less bugs and cleaner code and we may get performance boost.
		Best Practices: make every variable const if you can.
	
	Resource Acquisition is initialization(RAII)
		RAII is about writing safer C++ code
		The destructors of the stack objects are always called
		Stack objects are thrased in reverse order of their Creation
		So, Any critical resources, should be created on stack.
		they should be written to destroy themselves properly

------------------------------------------------------
Introducing Functional Programming in C++ : Troy Miles
------------------------------------------------------
	mpatel@blr-mpd67 IntroducingFunctionalProgramminginC++ % clang++ -std=c++17 -Wall demo.cpp
	mpatel@blr-mpd67 IntroducingFunctionalProgramminginC++ % ./a.out 
	===============================================================================
	All tests passed (7 assertions in 1 test case)

------------------------------------------------------
Code Clinic: C++ : Olivia Chiu Stone
------------------------------------------------------

mpatel@blr-mpd67 codeClinic % clang++ -std=c++17 -Wall geolocationWifi.cpp -o geolocationWifi -l cjson -l curl 
mpatel@blr-mpd67 codeClinic % ./geolocationWifi 

You are within 9052.76449082691m of 12.9728512N 77.7027584E
{
        "location":     {
                "lat":  12.9728512,
                "lng":  77.7027584
        },
        "accuracy":     9052.76449082691
}
{
        "macAddress":   "8c:a3:99:eb:bd:b2",
        "signalStrength":       -74,
        "signalToNoiseRatio":   -70,
        "channel":      157,
        "age":  0
}
mpatel@blr-mpd67 codeClinic % 
------------------------------------------------------
PluralSight Questions
------------------------------------------------------

1. What is the definition of the Liskov substitution principle?
Objects of a superclass should be replaceable with objects of its subclasses without breaking the application.

2. A C++ programmer successfully uses the following syntax to instantiate square: Square square = Square(1.0f); The following syntax fails to compile: Square square = 1.0f; Why?
The constructor Square(float x) is marked explicit.

3. You want to implement the dependency inversion principle (DIP) so it offers the greatest mobility in terms of code reutilization at the most layers of abstraction. How would you do so?
By extracting the abstract components into several packages/libraries

4. What can you add to the bottom of the following catch block to throw the original exception again?
catch (const std::exception& e) {
    std::cout << "exception caught!" << std::endl;
}
throw;
throw &e;
throw e;
throw std::exception(&e);

Answer is throw;

5. What does it mean when the capture clause is [=]?
Everything from the local scope that the lambda uses is copied into the member variables of a function object.

6. You want to allow the user of class X to chain (concatenate) calls for a member function as follows:
// x is an instance of class X
x.DoSomething().DoSomething()...
How would you specify *this as the value being returned?
By reference (X& X::DoSomething())

7. What is the difference between implementing the open-closed principle (OCP) using inheritance and implementing it using polymorphism?
Inheritance is less versatile because you must reuse the implementation, whereas polymorphism only reuses the API, which allows new implementations without modifying the rest of the code.

8. What is true of the Liskov substitution principle (LSP)?
The subclasses of a parent class can only implement validation rules that are equal or less restrictive than the parent.

9. What happens if a catch handler executes a throw without specifying an object?
The object that was caught will automatically be rethrown.

10. When using initializer lists, in what order are member variables initialized?
The order of declaration

11. A C++ programmer is working on a class Example. Its header file is Example.hpp and its implementation file is Example.cpp. The programmer can instantiate Example in main.cpp and use some of its methods. When they try to use a certain method, however, this link error occurs: undefined reference to `Example::exampleMethod()` How might the programmer have caused this error?
They declared exampleMethod in Example.hpp but did not implement it in Example.cpp.
They implemented exampleMethod in Example.cpp, but never declared it in Example.hpp.
They compiled Example.cpp, but never compiled main.cpp.
They declared exampleMethod as private, so it is inaccessible from main.cpp.

Answer Is : They declared exampleMethod in Example.hpp but did not implement it in Example.cpp.

12. Which is the correct syntax for a lambda returning a double?
[](int i) -> double  { /* body */ }

13. What happens if a noexcept(true) function throws an exception that isn't caught inside the function?
std::terminate is called immediately

14. What is true about catch (exception e)?
catch (exception e) triggers for derived exceptions, but it will actually be catching the base class, losing information.
catch (exception e) is not legal C++. The compiler emits an error when exceptions are caught by value.
catch (exception e) will not catch derived exceptions, only base exception objects.
catch (exception e) triggers for derived exceptions and will be catching the derived class.

Answer is : catch (exception e) triggers for derived exceptions, but it will actually be catching the base class, losing information.

15. A C++ program uses a C-style array a. The vector size is always static and known at compile-time. How would you quickly improve this program? 
Change a to std::array.
Change a to be dynamically allocated using malloc.
Change a to be dynamically allocated using calloc.
Change a to std::vector.

Answer is : Change a to std::array.

16. When applied to a built-in array or a std::array, what does the non-member function end() return?
A pointer to the last element
A pointer to the element just beyond the last element
A pointer to the element before the last element
nullptr

Answer is : A pointer to the element just beyond the last element

17. Which is true of the test expression used with switch statements?
It can be a std::string.
It cannot be a char value.
It cannot be a std::string.
It cannot be an integer value.

Answer is : It cannot be a std::string.

18. For the following code, the expression on Line-3 is equivalent to which expression?
Line-1: std::vector<int> v{11, 12};
Line-2: auto pbeg = v.begin();
Line-3: auto j = *pbeg++;

pbeg++; 
j = *pbeg;

++pbeg;
j = *pbeg

j = *(pbeg+1);

j = *pbeg; 
++pbeg;

Answer is : 
j = *pbeg; 
++pbeg;

19. An object of type MyClass is defined as: MyClass ob1; What is the correct declaration of a reference rOb1 that refers to ob1 object?
MyClass& rOb1 = ob1;

20. What is the difference between calling lock_guard and try_lock for a C++ mutex?
lock_guard is blocking, whereas try_lock is non-blocking.


1. Consider a multithreaded program in which each thread is in charge of replying to requests from remote servers. To implement a real-time monitoring visualization, you run an extra thread that polls whether the thread is active using a mutex per job. Which call is most useful to this thread?
try_lock

2. What is the output of the following code that implements stream precision and width?
double x = 1.0 / 9.0;
cout.precision(4);
cout.width(7);
cout << x;
" 0.1111"

3. Class A has a subclass B that implements more restrictive validation rules. Which problem does this introduce into the code base?
A violation to the Liskov substitution principle

4. What does unique_ptr's reset method do?
Deletes the owned object and optionally assumes ownership of a new object

5. In the following variadic template code, how would you retrieve the student's city?
auto student = std::make_tuple("Student", "Name", "Seattle", "WA", 2005, 92.3 );
std::get<2>(student)

6. What does the explicit keyword do if you place it before the following conversion operator? operator int() const;
Prevents the object from being implicitly cast to an int

7. Consider the Liskov substitution principle (LSP). When modeling several kettle models, the current interface of the parent class Kettle has a addWater(float liters). If the children classes you're designing are :
PremiumKettle (can connect to the mains)
 BasicKettle (needs water to function)
What changes would you make to the Kettle interface to make it LSP compatible?
Move the addWater method to the BasicKettle subclass.

8. What problem can occur when a C++ header file lacks include guards?
The preprocessor may insert the header's contents into the same file more than once, which can result in redefinition errors.

9. If you declare a member function to be const, what can it call?
Member functions marked const and static member functions

10. With a legacy code base, fixing one bug or issue commonly requires refactoring more than 10 of the classes in the entire project. What principle was likely ignored when planning the code?
Single responsibility principle

11. What is an example of following the SOLID principles when you must add a new behavior to the code base?
Creating a new class that is responsible for this behavior

12. How would you pass the content of a std::string to a legacy C function that needs read-only access to the input string present in your code base?
Invoke the c_str method on the given std::string.

13. Given the following enum class code, which variables are initialized properly (for example, code will compile correctly)?
enum class direction { LEFT, RIGHT, UP, DOWN };
int d1 = int(direction::LEFT);
direction d2 = direction::UP;
direction d3 = direction(direction::RIGHT);

All variables are initialized properly
d3
d2
d1

Answer is : All variables are initialized properly

14. When overloading a unary operator as a non-member function, how many explicit operands does the function take?
One, but post-increment would take two to disambiguate

15. How would you print an integer number 1044 in hexadecimal on console using std::cout?
std::hex << 1044;
std::cout << std::hex << 1044;
std::cout << std::num_with_base16(1044);
std::cout << std::hex(1044);

Answer is : std::cout << std::hex << 1044;

16. How could you replace this const float with a #define, maintaining the same value and type? const float pi = 3.14159;
#define PI 3.14159f

17. When overloading a binary operator as a member function, what number of explicit operands will the function take?
1

18. For the following integer val, which will compile without error? int val = 10;
int &r = val;
int r = &val;
int &r;r = val;
int &r = 10;

Answer is : int &r = val;

19. You are writing a program in C++ that will target multiple systems. How do you determine if the version of the standard library on a particular computer has a feature or not?
Check the values of the library feature macros.

20. Which member function of std::cin can you use to get the current internal error state flags of the std::cin object?
std::cin.rdstate()












